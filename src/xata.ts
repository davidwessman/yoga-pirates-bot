// Generated by Xata Codegen 0.18.0. Please do not edit.
import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "log",
    columns: [
      { name: "description", type: "text" },
      {
        name: "discordUserId",
        type: "string",
        notNull: true,
        defaultValue: "",
      },
      {
        name: "createdTimestamp",
        type: "datetime",
        notNull: true,
        defaultValue: "2021-04-01T18:46:52.292Z",
      },
      {
        name: "logDate",
        type: "datetime",
        notNull: true,
        defaultValue: "2021-01-01T18:47:57.127Z",
      },
      { name: "editedTimestamp", type: "datetime" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Log = InferredTypes["log"];
export type LogRecord = Log & XataRecord;

export type DatabaseSchema = {
  log: LogRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Queen-Raae-Workspace-edpk3k.eu-west-1.xata.sh/db/yoga-pirates",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
